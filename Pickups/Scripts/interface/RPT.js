Ext.chart.Chart.CHART_URL = "../../Scripts/interface/charts.swf", Ext.onReady(function () { Ext.get("RPT").on("click", function () { var t = Ext.getCmp("_rptForm"), e = function (t, e, a, o, l) { $.getJSON("/Utility/getRosterData", { dtfrom: e, dtTo: a, _category: o, _stat: l }, function (e) { if ("true" == e.status.toString()) { var a = []; $.each(e.dta, function (t, e) { a[t] = [e.id, e.staffno, e.staff, e.dateF, e.dateT, e.branch, e.staffcategory] }), t.getStore().removeAll(), t.getStore().loadData(a) } else t.getStore().removeAll() }) }, a = function (t, e, a, o) { $.getJSON("/Utility/getLeaveApplicationList", { frm: e, to: a, category: o }, function (e) { if ("true" == e.status.toString()) { var a = []; $.each(e.msg, function (t, e) { a[t] = [e.id, e.staffno, e.staff, e.from, e.to, e.branch, e.typeofleave] }), console.log(a), t.getStore().removeAll(), t.getStore().loadData(a) } }) }; t || new Ext.Window({ id: "_rptForm", title: "REPORT MODULE", height: 620, width: 850, resizable: !1, defaults: { xtype: "tabpanel", tabPosition: "bottom", enableTabScroll: !0, frame: !0 }, items: [{ activeTab: 0, items: [{ id: "", title: "LEAVE ROSTER", defaults: { xtype: "panel" }, items: [{ defaults: { xtype: "form", frame: !0, allowBlank: !1 }, layout: "column", items: [{ id: "f", width: "25%", defaults: { xtype: "datefield", format: "d/m/Y", allowBlank: !1, anchor: "100%" }, labelAlign: "top", items: [{ id: "frm", fieldLabel: "From", listeners: { blur: function () { Ext.fly("frm").getValue().length > 0 && Ext.fly("to").getValue().length > 0 && Ext.fly("staff").getValue().length > 0 && e(Ext.getCmp("grdReport"), Ext.fly("frm").getValue(), Ext.fly("to").getValue(), Ext.fly("staff").getValue(), 3) } } }] }, { id: "t", width: "25%", defaults: { xtype: "datefield", format: "d/m/Y", allowBlank: !1, anchor: "100%" }, labelAlign: "top", items: [{ id: "to", fieldLabel: "To", listeners: { blur: function () { Ext.fly("frm").getValue().length > 0 && Ext.fly("to").getValue().length > 0 && Ext.fly("staff").getValue().length > 0 && e(Ext.getCmp("grdReport"), Ext.fly("frm").getValue(), Ext.fly("to").getValue(), Ext.fly("staff").getValue(), 3) } } }] }, { id: "s", width: "20%", defaults: { xtype: "combo", typeAhead: !0, forceSelection: !0, allowBlank: !1, anchor: "100%" }, labelAlign: "top", items: [{ id: "staff", fieldLabel: "Staff Category", store: ["SENIOR STAFF", "JUNIOR STAFF", "ALL STAFF"], listeners: { blur: function () { Ext.fly("frm").getValue().length > 0 && Ext.fly("to").getValue().length > 0 && Ext.fly("staff").getValue().length > 0 && e(Ext.getCmp("grdReport"), Ext.fly("frm").getValue(), Ext.fly("to").getValue(), Ext.fly("staff").getValue(), 3) } } }] }, { id: "d", width: "30%", defaults: { xtype: "combo", typeAhead: !0, forceSelection: !0, allowBlank: !1, anchor: "100%", mode: "local" }, labelAlign: "top", items: [{ id: "dcbodept", fieldLabel: "Filter by Department", store: new Ext.data.Store({ autoLoad: !0, restful: !0, url: "/Utility/getDepartment", reader: new Ext.data.JsonReader({}, [{ name: "Id", type: "int" }, { name: "department", type: "string" }]) }), displayField: "department", valueField: "Id", listeners: { afterrender: function () { $.getJSON("/User/isAdmin", {}, function (t) { "false" == t.status.toString() && $("#dcbodept").attr("disabled", "disabled") }) }, change: function () { $.getJSON("/Utility/filterByDepartment", { d: Ext.fly("dcbodept").getValue() }, function (t) { if ("true" == t.status.toString()) { var e = []; $.each(t.dta, function (t, a) { e[t] = [a.id, a.staffno, a.staff, a.dateF, a.dateT, a.branch, a.staffcategory] }), Ext.getCmp("grdReport").getStore().removeAll(), Ext.getCmp("grdReport").getStore().loadData(e) } }) } } }] }] }, { collapsible: !1, defaults: { xtype: "form", frame: !0 }, items: [{ items: [new Ext.grid.GridPanel({ id: "grdReport", title: "", width: "auto", height: 430, autoScroll: !0, store: new Ext.data.GroupingStore({ reader: new Ext.data.ArrayReader({}, [{ name: "id", type: "int" }, { name: "staffno", type: "string" }, { name: "staff", type: "string" }, { name: "dateF", type: "string" }, { name: "dateT", type: "string" }, { name: "branch", type: "string" }, { name: "staffcategory", type: "string" }]), sortInfo: { field: "staffno", direction: "ASC" }, groupField: "branch" }), columns: [{ id: "id", header: "ID", hidden: !0, width: 40, dataIndex: "id" }, { id: "staffno", header: "STAFF No", hidden: !1, width: 40, dataIndex: "staffno" }, { id: "staff", header: "STAFF", hidden: !1, width: 100, dataIndex: "staff" }, { id: "dateF", header: "FROM", hidden: !1, width: 70, dataIndex: "dateF" }, { id: "dateT", header: "TO", hidden: !1, width: 70, dataIndex: "dateT" }, { id: "branch", header: "BRANCH", hidden: !0, width: 100, dataIndex: "branch" }, { id: "staffcategory", header: "STAFF CATEGORY", hidden: !1, width: 100, dataIndex: "staffcategory" }], stripeRows: !0, autoExpandColumn: "staff", view: new Ext.grid.GroupingView({ forceFit: !0, groupTextTpl: '{text} ({[values.rs.length]} {[values.rs.length > 1 ? "User(s)" : "Item"]})', getRowClass: function (t, e) { return e % 1 > 0 ? "odd" : "even" } }), frame: !0, collapsible: !1, animCollapse: !1, iconCls: "icon-grid" })] }], buttons: [{ text: "Print PDF", handler: function () { Ext.getCmp("grdReport").getStore().getCount() > 0 && window.open(document.getElementById("atPDF").href, "_blank") } }, { text: "Print Excel", handler: function () { Ext.getCmp("grdReport").getStore().getCount() > 0 && window.open(document.getElementById("atXL").href, "_blank") } }, { text: "Send Notifications", handler: function () { Ext.MessageBox.confirm("", "Are you sure you want to send notifications?", function (t) { "yes" == t.toString() && $.post("/Leave/MActivator", {}, function (t) { console.log(t.status.toString()) }, "json") }) } }, { tpl: new Ext.XTemplate('<a id="atPDF" style="display:none" href="{path}">Leave History Report (PDF)</a>'), compiled: !0, data: { path: "/GNA/PrintStaffPDFRoster" }, autoScroll: !0 }, { tpl: new Ext.XTemplate('<a id="atXL" style="display:none" href="{path}">Leave History Report (PDF)</a>'), compiled: !0, data: { path: "/GNA/PrintStaffExcelRoster" }, autoScroll: !0 }] }] }, { title: "LEAVE APPLICATIONS", defaults: { xtype: "panel" }, items: [{ defaults: { xtype: "form", frame: !0, border: !0, labelAlign: "top" }, layout: "column", items: [{ id: "appfrm", defaults: { xtype: "datefield", format: "d/m/Y", allowBlank: !1, anchor: "100%" }, width: "25%", items: [{ id: "tappfrm", fieldLabel: "From", listeners: { blur: function () { Ext.fly("tappfrm").getValue().length > 0 && Ext.fly("tappto").getValue().length > 0 && Ext.fly("cbost").getValue().length > 0 && a(Ext.getCmp("rptLvapp"), Ext.fly("tappfrm").getValue(), Ext.fly("tappto").getValue(), Ext.fly("cbost").getValue()) } } }] }, { id: "appto", defaults: { xtype: "datefield", format: "d/m/Y", allowBlank: !1, anchor: "100%" }, width: "25%", items: [{ id: "tappto", fieldLabel: "To", listeners: { blur: function () { Ext.fly("tappfrm").getValue().length > 0 && Ext.fly("tappto").getValue().length > 0 && Ext.fly("cbost").getValue().length > 0 && a(Ext.getCmp("rptLvapp"), Ext.fly("tappfrm").getValue(), Ext.fly("tappto").getValue(), Ext.fly("cbost").getValue()) } } }] }, { id: "appstaff", defaults: { xtype: "combo", allowBlank: !1, anchor: "100%", forceSelection: !0, typeAhead: !0, mode: "local" }, width: "20%", items: [{ id: "cbost", fieldLabel: "Staff Category", store: ["SENIOR STAFF", "JUNIOR STAFF", "ALL STAFF"], listeners: { blur: function () { Ext.fly("tappfrm").getValue().length > 0 && Ext.fly("tappto").getValue().length > 0 && Ext.fly("cbost").getValue().length > 0 && a(Ext.getCmp("rptLvapp"), Ext.fly("tappfrm").getValue(), Ext.fly("tappto").getValue(), Ext.fly("cbost").getValue()) } } }] }, { id: "appdept", defaults: { xtype: "combo", allowBlank: !1, anchor: "100%", forceSelection: !0, typeAhead: !0, mode: "local" }, width: "30%", items: [{ id: "cbodp", fieldLabel: "Filter by Department", store: new Ext.data.Store({ autoLoad: !0, restful: !0, url: "/Utility/getDepartment", reader: new Ext.data.JsonReader({}, [{ name: "Id", type: "int" }, { name: "department", type: "string" }]) }), valueField: "Id", displayField: "department", listeners: { blur: function () { Ext.fly("tappfrm").getValue().length > 0 && Ext.fly("tappto").getValue().length > 0 && Ext.fly("cbost").getValue().length > 0 && $.getJSON("/Utility/filterLeaveApplicationList", { d: Ext.fly("cbodp").getValue() }, function (t) { if ("restricted" == t.status.toString() && Ext.getCmp("cbodp").setValue(""), "true" == t.status.toString()) { var e = []; $.each(t.msg, function (t, a) { e[t] = [a.id, a.staffno, a.staff, a.from, a.to, a.branch, a.typeofleave] }), console.log(e), Ext.getCmp("rptLvapp").getStore().removeAll(), Ext.getCmp("rptLvapp").getStore().loadData(e) } }) } } }] }] }, { id: "xx", defaults: { xtype: "panel", frame: !0, collapsible: !0 }, layout: "card", activeItem: 0, resizable: !0, items: [{ title: "LEAVE APPLICATION REPORT", height: 450, items: [new Ext.grid.GridPanel({ id: "rptLvapp", width: "auto", height: 420, autoScroll: !0, store: new Ext.data.GroupingStore({ reader: new Ext.data.ArrayReader({}, [{ name: "id", type: "int" }, { name: "staffno", type: "string" }, { name: "staff", type: "string" }, { name: "from", type: "string" }, { name: "to", type: "string" }, { name: "branch", type: "string" }, { name: "typeofleave", type: "string" }]), sortInfo: { field: "staffno", direction: "ASC" }, groupField: "branch" }), columns: [new Ext.grid.CheckboxSelectionModel({ checkOnly: !0, singleSelect: !0 }), { id: "id", header: "ID", hidden: !0, width: 40, dataIndex: "id" }, { id: "staffno", header: "STAFF No", hidden: !1, width: 40, dataIndex: "staffno" }, { id: "staff", header: "STAFF", hidden: !1, width: 70, dataIndex: "staff" }, { id: "from", header: "FROM", hidden: !1, width: 70, dataIndex: "from" }, { id: "to", header: "TO", hidden: !1, width: 70, dataIndex: "to" }, { id: "branch", header: "BRANCH", hidden: !1, width: 100, dataIndex: "branch" }, { id: "typeofleave", header: "LEAVE", hidden: !1, width: 100, dataIndex: "typeofleave" }], stripeRows: !0, autoExpandColumn: "staff", view: new Ext.grid.GroupingView({ forceFit: !0, groupTextTpl: '{text} ({[values.rs.length]} {[values.rs.length > 1 ? "User(s)" : "Item"]})', getRowClass: function (t, e) { return e % 1 > 0 ? "odd" : "even" } }), sm: new Ext.grid.CheckboxSelectionModel, columnLines: !0, frame: !0, collapsible: !1, animCollapse: !1, iconCls: "icon-grid", listeners: { rowselect: function (t, e, a) { console.log(a.toString()) } }, buttons: [{ text: "Print CSV", handler: function () { Ext.getCmp("rptLvapp").getStore().getCount() > 0 && window.open(document.getElementById("lvCSV").href, "_blank") } }, { text: "Send Leave Notifications", handler: function () { Ext.getCmp("rptLvapp").getStore().getCount() > 0 && Ext.MessageBox.confirm("Confirm Operation", "Are you sure you want to send Leave notifications?", function (t) { "yes" == t.toString() && $.post("/Leave/ActivateObserverList", { mailformatType: "approval" }, function (t) { console.log(t.status.toString()) }, "json") }) } }, { text: "Send Bulk SMS", handler: function () { Ext.getCmp("rptLvapp").getStore().getCount() > 0 && Ext.MessageBox.confirm("Confirm Bulk SMS operation", "Are you sure you want to send SMS notifications?", function (t) { "yes" == t.toString() && $.post("/Leave/ActivateObserverList", { mailformatType: "sms" }, function (t) { info.log(t.status.toString()) }, "json") }) } }, { tpl: new Ext.XTemplate('<a id="lvCSV" style="display:none" href="{path}">Leave History Report (PDF)</a>'), compiled: !0, data: { path: "/GNA/FetchApprovedLeaveList" }, autoScroll: !0 }] })] }, { title: "GRAPHICAL ANALYSIS", iconCls: "chart", frame: !0, layout: "form", height: 700, width: 400, items: [{ xtype: "piechart", height: 400, store: new Ext.data.JsonStore({ fields: ["season", "total"], data: [{ season: "Summer", total: 150 }, { season: "Fall", total: 245 }, { season: "Winter", total: 117 }] }), dataField: "total", categoryField: "season", extraStyle: { legend: { display: "bottom", padding: 5, font: { family: "Tahoma", size: 9 } } } }] }] }] }] }] }).show() }) });